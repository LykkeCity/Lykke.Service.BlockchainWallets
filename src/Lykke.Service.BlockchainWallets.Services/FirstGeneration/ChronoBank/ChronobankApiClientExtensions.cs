// Code generated by Microsoft (R) AutoRest Code Generator 0.17.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

using System.Threading.Tasks;

namespace Lykke.Service.BlockchainWallets.Services.FirstGeneration.ChronoBank
{
    /// <summary>
    /// Extension methods for ChronobankApiClient.
    /// </summary>
    public static partial class ChronobankApiClientExtensions
    {
            /// <summary>
            /// Gets new ehtereum user contract and saves it for monitoring
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object ApiClientRegisterGet(this IChronobankApiClient operations)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IChronobankApiClient)s).ApiClientRegisterGetAsync(), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets new ehtereum user contract and saves it for monitoring
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<object> ApiClientRegisterGetAsync(this IChronobankApiClient operations, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ApiClientRegisterGetWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Check API is alive
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static void ApiIsAliveGet(this IChronobankApiClient operations)
            {
                System.Threading.Tasks.Task.Factory.StartNew(s => ((IChronobankApiClient)s).ApiIsAliveGetAsync(), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None,  System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Check API is alive
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task ApiIsAliveGetAsync(this IChronobankApiClient operations, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                await operations.ApiIsAliveGetWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Check Ethereum RPC is alive
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static void ApiIsAliveRpcGet(this IChronobankApiClient operations)
            {
                System.Threading.Tasks.Task.Factory.StartNew(s => ((IChronobankApiClient)s).ApiIsAliveRpcGetAsync(), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None,  System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Check Ethereum RPC is alive
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task ApiIsAliveRpcGetAsync(this IChronobankApiClient operations, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                await operations.ApiIsAliveRpcGetWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false);
            }

    }
}
